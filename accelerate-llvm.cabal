name:                   accelerate-llvm
version:                0.15.0.0
cabal-version:          >= 1.10
tested-with:            GHC == 7.6.*
build-type:             Simple

synopsis:               Accelerate backend generating LLVM
description:
    This library implements a backend for the /Accelerate/ language which
    generates LLVM-IR, targeting both CUDA capable GPUs and multicore CPUs. For
    further information, refer to the main /Accelerate/ package:
    <http://hackage.haskell.org/package/accelerate>

license:                BSD3
license-file:           LICENSE
author:                 Trevor L. McDonell
maintainer:             Trevor L. McDonell <tmcdonell@nvidia.com>
bug-reports:            https://github.com/AccelerateHS/accelerate/issues
category:               Compilers/Interpreters, Concurrency, Data, Parallelism

extra-source-files:     include/accelerate.h


-- Configuration flags
-- -------------------

Flag nvvm
  Default:              True
  Description:          Enable the NVVM backend for CUDA capable NVIDIA GPUs.

Flag debug
  Default:              False
  Description:
    Enable tracing message flags. These are read from the command-line
    arguments, which is convenient but may cause problems interacting with the
    user program, so is not enabled by default. The available options:
    .

Flag bounds-checks
  Default:              True
  Description:          Enable bounds checking

Flag unsafe-checks
  Default:              False
  Description:          Enable bounds checking in unsafe operations

Flag internal-checks
  Default:              False
  Description:          Enable internal consistency checks


-- Build configuration
-- -------------------

Library
  exposed-modules:
    Data.Array.Accelerate.LLVM.Native

  other-modules:
    -- Accelerate-LLVM middle-end
    Data.Array.Accelerate.LLVM.AST
    Data.Array.Accelerate.LLVM.CodeGen
    Data.Array.Accelerate.LLVM.CodeGen.Arithmetic
    Data.Array.Accelerate.LLVM.CodeGen.Base
    Data.Array.Accelerate.LLVM.CodeGen.Constant
    Data.Array.Accelerate.LLVM.CodeGen.Environment
    Data.Array.Accelerate.LLVM.CodeGen.Exp
    Data.Array.Accelerate.LLVM.CodeGen.Module
    Data.Array.Accelerate.LLVM.CodeGen.Monad
    Data.Array.Accelerate.LLVM.CodeGen.Type
    Data.Array.Accelerate.LLVM.Compile
    Data.Array.Accelerate.LLVM.Debug
    Data.Array.Accelerate.LLVM.State
    Data.Array.Accelerate.LLVM.Target
    Data.Array.Accelerate.LLVM.Util

    -- NVVM target
    Data.Array.Accelerate.LLVM.NVVM.Target

    -- Native target
    Data.Array.Accelerate.LLVM.Native.Array.Data
    Data.Array.Accelerate.LLVM.Native.Compile
    Data.Array.Accelerate.LLVM.Native.Target

    Data.Array.Accelerate.LLVM.Native.Execute
    Data.Array.Accelerate.LLVM.Native.Execute.Environment
    Data.Array.Accelerate.LLVM.Native.Execute.Fill
    Data.Array.Accelerate.LLVM.Native.Execute.Gang
    Data.Array.Accelerate.LLVM.Native.Execute.Marshal

    Data.Array.Accelerate.LLVM.CodeGen.Native.Fold
    Data.Array.Accelerate.LLVM.CodeGen.Native.Generate
    Data.Array.Accelerate.LLVM.CodeGen.Native.Map
    Data.Array.Accelerate.LLVM.CodeGen.Native.Transform


  other-modules:

  build-depends:
    base                        >= 4.6 && <5.0,
    accelerate                  == 0.15.*,
    bytestring                  >= 0.9,
    containers                  >= 0.5 && <0.6,
    dlist                       >= 0.6,
    fclabels                    >= 2.0,
    libffi,
    llvm-general,
    llvm-general-pure,
    mtl,
    time

  default-language:     Haskell2010

  include-dirs:         include
  ghc-options:          -O2 -Wall -fwarn-tabs -dcore-lint

  if flag(nvvm)
    build-depends:
      cuda                      >= 0.5,
      libnvvm

  if flag(debug)
    cpp-options:        -DACCELERATE_DEBUG

  if flag(bounds-checks)
    cpp-options:        -DACCELERATE_BOUNDS_CHECKS

  if flag(unsafe-checks)
    cpp-options:        -DACCELERATE_UNSAFE_CHECKS

  if flag(internal-checks)
    cpp-options:        -DACCELERATE_INTERNAL_CHECKS


source-repository head
  type:                 git
  location:

-- vim: nospell
