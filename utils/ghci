#!/bin/bash

# Adjust to the installed location of ghci, if this script can not find it.
#
GHC=`which ghc`
VER=`$GHC --numeric-version`
GHC_FLAGS="--interactive"

# We need to figure out the size of some basic types. This is the same as what
# the configure script does when we do a regular install.
#
function htype {

  sizeof=`$GHC -w -ignore-dot-ghci -e "Foreign.sizeOf (undefined::Foreign.C.$1)"`
  case $sizeof in
    4) ty="$2"32 ;;
    8) ty="$2"64 ;;
  esac

  GHC_FLAGS="$GHC_FLAGS -optP-DSIZEOF_$3=$sizeof -optP-D$3=$ty"
}

# htype CLong  Int  HTYPE_LONG
# htype CULong Word HTYPE_UNSIGNED_LONG

# We assume a cabal sandbox. If you have installed elsewhere or are using some
# other tool, change or delete the '-package-db' line.
#
GHC_FLAGS="$GHC_FLAGS
    -DACCELERATE_BOUNDS_CHECKS
    -DACCELERATE_INTERNAL_CHECKS
    -DACCELERATE_DEBUG
    -iaccelerate-llvm
    -iaccelerate-llvm-native
    -iaccelerate-llvm-ptx
    -iaccelerate-llvm-multidev
    -package-db .cabal-sandbox/x86_64-osx-ghc-$VER-packages.conf.d
    -Iaccelerate-llvm/include -optP-include -optPaccelerate-llvm/dist/build/autogen/cabal_macros.h"

# If we have specified one command line argument, but that file doesn't exist,
# search the source files for something with that name prefix.
#
# > ghci shar
#
# should result in:
#
# > ghci Data/Array/Accelerate/Trafo/Sharing.hs
#
FILES=`find accelerate-llvm*/Data -iname "$1*" -name "*.hs"`
COUNT=`echo $FILES | wc -w`

if [ $COUNT -eq 1 ]; then
    $GHC $GHC_FLAGS $FILES
else
    $GHC $GHC_FLAGS $@
fi

